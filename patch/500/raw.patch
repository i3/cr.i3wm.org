From 85e785f62c3d6f1b1fdcc34751f8063a46141709 Mon Sep 17 00:00:00 2001
From: Tony Crisci <tony@â€¦>
Date: Tue, 1 Apr 2014 06:53:14 -0400
Subject: [PATCH] Fix test 158

Test 158 was not properly testing the absense of the WM_TAKE_FOCUS
ClientMessage because of a bad assumption about how sync_with_i3
presently works.

This fix implements a function that should work in the way it was
previously intended.
---
 testcases/t/158-wm_take_focus.t | 61 +++++++++++++++++++++++++++++++++++------
 1 file changed, 52 insertions(+), 9 deletions(-)

diff --git a/testcases/t/158-wm_take_focus.t b/testcases/t/158-wm_take_focus.t
index 222c93e..ba4cc16 100644
--- a/testcases/t/158-wm_take_focus.t
+++ b/testcases/t/158-wm_take_focus.t
@@ -17,15 +17,62 @@
 # Tests if the WM_TAKE_FOCUS protocol is correctly handled by i3
 #
 use i3test;
+use X11::XCB qw(:all);
+
+# Determines whether or not we received a WM_TAKE_FOCUS ClientMessage. Sends a
+# sync message to i3 which will send a reply after WM_TAKE_FOCUS should have
+# been received. If we get the sync message instead of WM_TAKE_FOCUS, we assume
+# it was not sent.
+sub recv_take_focus {
+    my ($window) = @_;
+
+    my $take_focus = $x->atom(name => 'WM_TAKE_FOCUS');
+    # max ulong
+    my $not_take_focus = 4294967295;
+
+    my $root = $x->get_root_window();
+
+    # Generate a ClientMessage, see xcb_client_message_t
+    my $msg = pack "CCSLLLLLLL",
+         CLIENT_MESSAGE,    # response_type
+         32,                # format
+         0,                 # sequence
+         $root,             # destination window
+         $x->atom(name => 'I3_SYNC')->id,
+
+         $window->id,       # data[0]: our own window id
+         $not_take_focus,   # data[1]: a value to identify the request
+         0,
+         0,
+         0;
+
+    $x->send_event(0, $root, EVENT_MASK_SUBSTRUCTURE_REDIRECT, $msg);
+
+    my $result = 0;
+
+    wait_for_event 1, sub {
+        # A return value of 0 means "continue to wait" and a return value of 1
+        # means "the event was found"
+        return 0 unless $_[0]->{response_type} == 161;
+        my ($event) = @_;
+        my @data = unpack("L2", $event->{data});
+
+        return 1 if $data[0] == $window->id && $data[1] == $not_take_focus;
+
+        $result = $data[0] == $take_focus->id;
+
+        return $result;
+    };
+
+    return $result;
+}
 
 subtest 'Window without WM_TAKE_FOCUS', sub {
     fresh_workspace;
 
     my $window = open_window;
-    # sync_with_i3 will send a ClientMessage to i3 and receive one targeted to
-    # $window->id. If it receives WM_TAKE_FOCUS instead, it will return 0, thus
-    # the test will fail.
-    ok(sync_with_i3(window_id => $window->id), 'did not receive ClientMessage');
+
+    ok(!recv_take_focus($window), 'Did not receive ClientMessage');
 
     done_testing;
 };
@@ -42,11 +89,7 @@ subtest 'Window with WM_TAKE_FOCUS', sub {
 
     $window->map;
 
-    ok(wait_for_event(1, sub {
-        return 0 unless $_[0]->{response_type} == 161;
-        my ($data, $time) = unpack("L2", $_[0]->{data});
-        return ($data == $take_focus->id);
-    }), 'got ClientMessage with WM_TAKE_FOCUS atom');
+    ok(recv_take_focus($window), 'got ClientMessage with WM_TAKE_FOCUS atom');
 
     done_testing;
 };
-- 
1.9.1

