From 52cc9f37b894efe021e87d6179389017c36f04c0 Mon Sep 17 00:00:00 2001
From: Lancelot SIX <lancelot@…>
Date: Sat, 9 Nov 2013 21:43:47 +0100
Subject: [PATCH] Remove references to PATH_MAX macro

Since the macro PATH_MAX is not defined on every system (GNU/Hurd being
one of those who do not define it), we remove all references to this
macro. Instead, we use a buffer of arbitraty size and grow it when
needed to contain paths.
---
 i3-nagbar/main.c           |  4 ++-
 i3bar/src/xcb.c            | 44 ++++++++++++++++++++++++--------
 include/libi3.h            |  3 ++-
 libi3/get_exe_path.c       | 62 +++++++++++++++++++++++++++++++++++-----------
 libi3/root_atom_contents.c | 21 ++++++++++++++--
 src/display_version.c      | 37 +++++++++++++++++++++------
 src/main.c                 | 15 ++++++++---
 7 files changed, 145 insertions(+), 41 deletions(-)

diff --git a/i3-nagbar/main.c b/i3-nagbar/main.c
index 0fa75f8..952270e 100644
--- a/i3-nagbar/main.c
+++ b/i3-nagbar/main.c
@@ -159,8 +159,9 @@ static void handle_button_release(xcb_connection_t *conn, xcb_button_release_eve
     fclose(script);
 
     char *link_path;
+    char *exe_path = get_exe_path(argv0);
     sasprintf(&link_path, "%s.nagbar_cmd", script_path);
-    symlink(get_exe_path(argv0), link_path);
+    symlink(exe_path, link_path);
 
     char *terminal_cmd;
     sasprintf(&terminal_cmd, "i3-sensible-terminal -e %s", link_path);
@@ -172,6 +173,7 @@ static void handle_button_release(xcb_connection_t *conn, xcb_button_release_eve
     free(link_path);
     free(terminal_cmd);
     free(script_path);
+    free(exe_path);
 
     /* TODO: unset flag, re-render */
 }
diff --git a/i3bar/src/xcb.c b/i3bar/src/xcb.c
index cec7ab8..b56fc33 100644
--- a/i3bar/src/xcb.c
+++ b/i3bar/src/xcb.c
@@ -961,26 +961,48 @@ char *init_xcb_early() {
     get_atoms();
 
     xcb_get_property_cookie_t path_cookie;
+    xcb_get_property_reply_t *path_reply;
+    int len;
+    size_t path_size = 1024;
+    char *path = NULL;
+
     path_cookie = xcb_get_property_unchecked(xcb_connection,
-                                   0,
-                                   xcb_root,
-                                   atoms[I3_SOCKET_PATH],
-                                   XCB_GET_PROPERTY_TYPE_ANY,
-                                   0, PATH_MAX);
+                                             0,
+                                             xcb_root,
+                                             atoms[I3_SOCKET_PATH],
+                                             XCB_GET_PROPERTY_TYPE_ANY,
+                                             0,
+                                             (path_size / 4));
 
     /* We check, if i3 set its socket-path */
-    xcb_get_property_reply_t *path_reply = xcb_get_property_reply(xcb_connection,
-                                                                  path_cookie,
-                                                                  NULL);
-    char *path = NULL;
+    path_reply = xcb_get_property_reply(xcb_connection,
+                                        path_cookie,
+                                        NULL);
     if (path_reply) {
-        int len = xcb_get_property_value_length(path_reply);
+        len = xcb_get_property_value_length(path_reply);
+
+        if (len > 0 && len < path_size) {
+            path_size += (path_reply->bytes_after / 4) + 1;
+            path_cookie = xcb_get_property_unchecked(xcb_connection,
+                                                     0,
+                                                     xcb_root,
+                                                     atoms[I3_SOCKET_PATH],
+                                                     XCB_GET_PROPERTY_TYPE_ANY,
+                                                     0,
+                                                     (path_size / 4));
+
+            path_reply = xcb_get_property_reply(xcb_connection,
+                                                path_cookie,
+                                                NULL);
+        }
+    }
+    if (path_reply) {
+        len = xcb_get_property_value_length(path_reply);
         if (len != 0) {
             path = strndup(xcb_get_property_value(path_reply), len);
         }
     }
 
-
     if (xcb_request_failed(sl_pm_cookie, "Could not allocate statusline-buffer") ||
         xcb_request_failed(clear_ctx_cookie, "Could not allocate statusline-buffer-clearcontext") ||
         xcb_request_failed(sl_ctx_cookie, "Could not allocate statusline-buffer-context")) {
diff --git a/include/libi3.h b/include/libi3.h
index b0141f1..5700757 100644
--- a/include/libi3.h
+++ b/include/libi3.h
@@ -369,7 +369,8 @@ char *get_process_filename(const char *prefix);
  *
  * The implementation follows http://stackoverflow.com/a/933996/712014
  *
+ * Returned value must be freed by the caller.
  */
-const char *get_exe_path(const char *argv0);
+char *get_exe_path(const char *argv0);
 
 #endif
diff --git a/libi3/get_exe_path.c b/libi3/get_exe_path.c
index fca7ba0..aaa448d 100644
--- a/libi3/get_exe_path.c
+++ b/libi3/get_exe_path.c
@@ -3,6 +3,7 @@
 #include <stdio.h>
 #include <limits.h>
 #include <stdlib.h>
+#include <errno.h>
 
 #include "libi3.h"
 
@@ -11,10 +12,14 @@
  *
  * The implementation follows http://stackoverflow.com/a/933996/712014
  *
+ * Returned value must be freed by the caller.
  */
-const char *get_exe_path(const char *argv0) {
-	static char destpath[PATH_MAX];
-	char tmp[PATH_MAX];
+char *get_exe_path(const char *argv0) {
+	size_t destpath_size = 1024;
+	size_t tmp_size = 1024;
+	char *destpath = smalloc(destpath_size);
+	char *tmp = smalloc(tmp_size);
+
 
 #if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 	/* Linux and Debian/kFreeBSD provide /proc/self/exe */
@@ -25,30 +30,51 @@ const char *get_exe_path(const char *argv0) {
 #endif
 	ssize_t linksize;
 
-	if ((linksize = readlink(exepath, destpath, sizeof(destpath) - 1)) != -1) {
+	while ((linksize = readlink(exepath, destpath, destpath_size)) == destpath_size) {
+		destpath_size = destpath_size * 2;
+		destpath = srealloc(destpath, destpath_size);
+	}
+	if (linksize != -1) {
 		/* readlink() does not NULL-terminate strings, so we have to. */
 		destpath[linksize] = '\0';
-
+		free(tmp);
 		return destpath;
 	}
 #endif
 
 	/* argv[0] is most likely a full path if it starts with a slash. */
-	if (argv0[0] == '/')
-		return argv0;
+	if (argv0[0] == '/') {
+		free(tmp);
+		free(destpath);
+		return sstrdup(argv0);
+	}
 
 	/* if argv[0] contains a /, prepend the working directory */
-	if (strchr(argv0, '/') != NULL &&
-		getcwd(tmp, sizeof(tmp)) != NULL) {
-		snprintf(destpath, sizeof(destpath), "%s/%s", tmp, argv0);
-		return destpath;
+	if (strchr(argv0, '/') != NULL) {
+		char *retgcwd;
+		while ((retgcwd = getcwd(tmp, tmp_size)) == NULL && errno == ERANGE) {
+			tmp_size = tmp_size * 2;
+			tmp = srealloc(tmp, tmp_size);
+		}
+		if (retgcwd != NULL) {
+			while (snprintf(destpath, destpath_size, "%s/%s", tmp, argv0) >= destpath_size) {
+				destpath_size = destpath_size * 2;
+				destpath = srealloc(destpath, destpath_size);
+			}
+
+			free(tmp);
+			return destpath;
+		}
 	}
 
 	/* Fall back to searching $PATH (or _CS_PATH in absence of $PATH). */
 	char *path = getenv("PATH");
 	if (path == NULL) {
 		/* _CS_PATH is typically something like "/bin:/usr/bin" */
-		confstr(_CS_PATH, tmp, sizeof(tmp));
+		while (confstr(_CS_PATH, tmp, tmp_size) > tmp_size) {
+			tmp_size = tmp_size * 2;
+			tmp = srealloc(tmp, tmp_size);
+		}
 		sasprintf(&path, ":%s", tmp);
 	} else {
 		path = strdup(path);
@@ -59,16 +85,22 @@ const char *get_exe_path(const char *argv0) {
 		if ((component = strtok(str, ":")) == NULL)
 			break;
 		str = NULL;
-		snprintf(destpath, sizeof(destpath), "%s/%s", component, argv0);
+		while(snprintf(destpath, destpath_size, "%s/%s", component, argv0) >= destpath_size) {
+			destpath_size = destpath_size * 2;
+			destpath = srealloc(destpath, destpath_size);
+		}
 		/* Of course this is not 100% equivalent to actually exec()ing the
 		 * binary, but meh. */
 		if (access(destpath, X_OK) == 0) {
 			free(path);
+			free(tmp);
 			return destpath;
 		}
 	}
-	free(path);
 
 	/* Last resort: maybe it’s in /usr/bin? */
-	return "/usr/bin/i3-nagbar";
+	free(destpath);
+	free(path);
+	free(tmp);
+	return sstrdup("/usr/bin/i3-nagbar");
 }
diff --git a/libi3/root_atom_contents.c b/libi3/root_atom_contents.c
index cabaaf2..bde0ef8 100644
--- a/libi3/root_atom_contents.c
+++ b/libi3/root_atom_contents.c
@@ -29,6 +29,9 @@ char *root_atom_contents(const char *atomname) {
     xcb_intern_atom_reply_t *atom_reply;
     int screen;
     char *content;
+    /* Should be a multiple of 4 */
+    int path_max_size = 1024;
+    int prop_value_size = 0;
 
     if ((conn = xcb_connect(NULL, &screen)) == NULL ||
         xcb_connection_has_error(conn))
@@ -46,10 +49,24 @@ char *root_atom_contents(const char *atomname) {
     xcb_get_property_cookie_t prop_cookie;
     xcb_get_property_reply_t *prop_reply;
     prop_cookie = xcb_get_property_unchecked(conn, false, root, atom_reply->atom,
-                                             XCB_GET_PROPERTY_TYPE_ANY, 0, PATH_MAX);
+                                             XCB_GET_PROPERTY_TYPE_ANY, 0, path_max_size / 4);
     prop_reply = xcb_get_property_reply(conn, prop_cookie, NULL);
-    if (prop_reply == NULL || xcb_get_property_value_length(prop_reply) == 0)
+    if (prop_reply) {
+        prop_value_size = xcb_get_property_value_length(prop_reply);
+        if (prop_reply && prop_value_size > 0 && prop_value_size < path_max_size) {
+            path_max_size += (prop_reply->bytes_after / 4) + 1;
+            prop_cookie = xcb_get_property_unchecked(conn, false, root, atom_reply->atom,
+                            XCB_GET_PROPERTY_TYPE_ANY, 0, path_max_size / 4);
+            prop_reply = xcb_get_property_reply(conn, prop_cookie, NULL);
+	    prop_value_size = 0;
+	    if (prop_reply) {
+                prop_value_size = xcb_get_property_value_length(prop_reply);
+	    }
+        }
+    }
+    if (prop_reply == NULL || prop_value_size == 0)
         return NULL;
+
     if (prop_reply->type == XCB_ATOM_CARDINAL) {
         /* We treat a CARDINAL as a >= 32-bit unsigned int. The only CARDINAL
          * we query is I3_PID, which is 32-bit. */
diff --git a/src/display_version.c b/src/display_version.c
index 0901ae0..01691a9 100644
--- a/src/display_version.c
+++ b/src/display_version.c
@@ -128,13 +128,23 @@ void display_running_version(void) {
     printf("\rRunning i3 version: %s (pid %s)\n", human_readable_version, pid_from_atom);
 
 #ifdef __linux__
-    char exepath[PATH_MAX],
-         destpath[PATH_MAX];
+    size_t exepath_size = 1024,
+           destpath_size = 1024;
     ssize_t linksize;
 
-    snprintf(exepath, sizeof(exepath), "/proc/%d/exe", getpid());
+    char *exepath = smalloc(exepath_size);
+    char *destpath = smalloc(destpath_size);
 
-    if ((linksize = readlink(exepath, destpath, sizeof(destpath))) == -1)
+    while (snprintf(exepath, exepath_size, "/proc/%d/exe", getpid()) >= exepath_size) {
+            exepath_size = exepath_size * 2;
+            exepath = srealloc(exepath, exepath_size);
+    }
+
+    while ((linksize = readlink(exepath, destpath, destpath_size)) == destpath_size) {
+            destpath_size = destpath_size * 2;
+            destpath = srealloc(destpath, destpath_size);
+    }
+    if (linksize == -1)
         err(EXIT_FAILURE, "readlink(%s)", exepath);
 
     /* readlink() does not NULL-terminate strings, so we have to. */
@@ -143,9 +153,16 @@ void display_running_version(void) {
     printf("\n");
     printf("The i3 binary you just called: %s\n", destpath);
 
-    snprintf(exepath, sizeof(exepath), "/proc/%s/exe", pid_from_atom);
+    while (snprintf(exepath, exepath_size, "/proc/%s/exe", pid_from_atom) >= exepath_size) {
+            exepath_size = exepath_size * 2;
+            exepath = srealloc(exepath, exepath_size);
+    }
 
-    if ((linksize = readlink(exepath, destpath, sizeof(destpath))) == -1)
+    while ((linksize = readlink(exepath, destpath, destpath_size)) == destpath_size) {
+        destpath_size = destpath_size * 2;
+        destpath = srealloc(destpath, destpath_size);
+    }
+    if (linksize == -1)
         err(EXIT_FAILURE, "readlink(%s)", exepath);
 
     /* readlink() does not NULL-terminate strings, so we have to. */
@@ -159,7 +176,10 @@ void display_running_version(void) {
     /* Since readlink() might put a "(deleted)" somewhere in the buffer and
      * stripping that out seems hackish and ugly, we read the process’s argv[0]
      * instead. */
-    snprintf(exepath, sizeof(exepath), "/proc/%s/cmdline", pid_from_atom);
+    while (snprintf(exepath, exepath_size, "/proc/%s/cmdline", pid_from_atom) >= exepath_size) {
+        exepath_size = exepath_size * 2;
+        exepath = srealloc(exepath, exepath_size);
+    }
 
     int fd;
     if ((fd = open(exepath, O_RDONLY)) == -1)
@@ -169,6 +189,9 @@ void display_running_version(void) {
     close(fd);
 
     printf("The i3 binary you are running: %s\n", destpath);
+
+    free(exepath);
+    free(destpath);
 #endif
 
     yajl_free(handle);
diff --git a/src/main.c b/src/main.c
index aac7388..00318de 100644
--- a/src/main.c
+++ b/src/main.c
@@ -488,18 +488,25 @@ int main(int argc, char *argv[]) {
 
         /* The following code is helpful, but not required. We thus don’t pay
          * much attention to error handling, non-linux or other edge cases. */
-        char cwd[PATH_MAX];
         LOG("CORE DUMPS: You are running a development version of i3, so coredumps were automatically enabled (ulimit -c unlimited).\n");
-        if (getcwd(cwd, sizeof(cwd)) != NULL)
+        size_t cwd_size = 1024;
+        char *cwd = smalloc(cwd_size);
+        while (getcwd(cwd, cwd_size) == NULL && errno == ERANGE) {
+                cwd_size = cwd_size * 2;
+                cwd = srealloc(cwd, cwd_size);
+        }
+        if (cwd != NULL)
             LOG("CORE DUMPS: Your current working directory is \"%s\".\n", cwd);
+
         int patternfd;
         if ((patternfd = open("/proc/sys/kernel/core_pattern", O_RDONLY)) >= 0) {
-            memset(cwd, '\0', sizeof(cwd));
-            if (read(patternfd, cwd, sizeof(cwd)) > 0)
+            memset(cwd, '\0', cwd_size);
+            if (read(patternfd, cwd, cwd_size) > 0)
                 /* a trailing newline is included in cwd */
                 LOG("CORE DUMPS: Your core_pattern is: %s", cwd);
             close(patternfd);
         }
+        free(cwd);
     }
 
     LOG("i3 " I3_VERSION " starting\n");
-- 
1.8.4.2

