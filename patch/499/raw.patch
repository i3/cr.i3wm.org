From fb175aaf11257e673715afca9987edc933e17d9e Mon Sep 17 00:00:00 2001
From: Marco Hunsicker <i3@…>
Date: Tue, 1 Apr 2014 07:52:27 +0200
Subject: [PATCH] Send IPC workspace blank event when workspace becomes empty

This patch adds a new workspace "blank" event that is send after the
last application window in a workspace has been closed and the
workspace becomes empty.
---
 docs/ipc                              |   12 ++-
 src/tree.c                            |   11 ++-
 src/workspace.c                       |    6 ++
 testcases/t/223-ipc-workspace-blank.t |  158 +++++++++++++++++++++++++++++++++
 4 files changed, 182 insertions(+), 5 deletions(-)
 create mode 100644 testcases/t/223-ipc-workspace-blank.t

diff --git a/docs/ipc b/docs/ipc
index 7fb9f1a..b25bace 100644
--- a/docs/ipc
+++ b/docs/ipc
@@ -624,8 +624,9 @@ strip the highest bit first).
 
 workspace (0)::
 	Sent when the user switches to a different workspace, when a new
-	workspace is initialized or when a workspace is removed (because the
-	last client vanished).
+	workspace is initialized, when a workspace becomes empty (because the last
+	application window has been closed) or when a workspace is removed (because
+	the last client vanished).
 output (1)::
 	Sent when RandR issues a change notification (of either screens,
 	outputs, CRTCs or output properties).
@@ -661,7 +662,7 @@ if ($is_event) {
 
 This event consists of a single serialized map containing a property
 +change (string)+ which indicates the type of the change ("focus", "init",
-"empty", "urgent").
+"blank", "empty", "urgent").
 
 Moreover, when the change is "focus", an +old (object)+ and a +current
 (object)+ properties will be present with the previous and current
@@ -671,6 +672,11 @@ workspace, and the +old+ property will be set to +null+.  Also note
 that if the previous is empty it will get destroyed when switching,
 but will still be present in the "old" property.
 
+Please note that for historic reasons, the change "blank" indicates that
+a workspace became empty (because the last application window has been
+closed), while the change "empty" indicates that a workspace has been
+removed (because it was empty).
+
 *Example:*
 ---------------------
 {
diff --git a/src/tree.c b/src/tree.c
index 80af522..bf293c3 100644
--- a/src/tree.c
+++ b/src/tree.c
@@ -229,6 +229,9 @@ bool tree_close(Con *con, kill_window_t kill_window, bool dont_kill_parent, bool
         return false;
     }
 
+    Con *ws = con_get_workspace(con);
+    bool ws_was_empty = !ws || (TAILQ_EMPTY(&(ws->nodes_head)) && TAILQ_EMPTY(&(ws->floating_head)));
+
     if (con->window != NULL) {
         if (kill_window != DONT_KILL_WINDOW) {
             x_window_kill(con->window->id, kill_window);
@@ -264,8 +267,6 @@ bool tree_close(Con *con, kill_window_t kill_window, bool dont_kill_parent, bool
         FREE(con->window);
     }
 
-    Con *ws = con_get_workspace(con);
-
     /* Figure out which container to focus next before detaching 'con'. */
     if (con_is_floating(con)) {
         if (con == focused) {
@@ -321,6 +322,12 @@ bool tree_close(Con *con, kill_window_t kill_window, bool dont_kill_parent, bool
     TAILQ_REMOVE(&all_cons, con, all_cons);
     free(con);
 
+    /* if the workspace became empty, notify any interested parties. */
+    if (!ws_was_empty && TAILQ_EMPTY(&(ws->nodes_head)) && TAILQ_EMPTY(&(ws->floating_head))) {
+        DLOG("Issue IPC workspace blank event for workspace %s\n", ws->name);
+        ipc_send_event("workspace", I3_IPC_EVENT_WORKSPACE, "{\"change\":\"blank\"}");
+    }
+
     /* in the case of floating windows, we already focused another container
      * when closing the parent, so we can exit now. */
     if (!next) {
diff --git a/src/workspace.c b/src/workspace.c
index 670322a..693a456 100644
--- a/src/workspace.c
+++ b/src/workspace.c
@@ -424,6 +424,12 @@ static void _workspace_show(Con *workspace) {
         }
     }
 
+    /* if the new workspace is empty, notify any interested parties. */
+    if (TAILQ_EMPTY(&(workspace->nodes_head)) && TAILQ_EMPTY(&(workspace->floating_head))) {
+        DLOG("Issue IPC workspace blank event for workspace %s\n", workspace->name);
+        ipc_send_event("workspace", I3_IPC_EVENT_WORKSPACE, "{\"change\":\"blank\"}");
+    }
+
     workspace->fullscreen_mode = CF_OUTPUT;
     LOG("focused now = %p / %s\n", focused, focused->name);
 
diff --git a/testcases/t/223-ipc-workspace-blank.t b/testcases/t/223-ipc-workspace-blank.t
new file mode 100644
index 0000000..7ac18dc
--- /dev/null
+++ b/testcases/t/223-ipc-workspace-blank.t
@@ -0,0 +1,158 @@
+#!perl
+# vim:ts=4:sw=4:expandtab
+#
+# Please read the following documents before working on tests:
+# • http://build.i3wm.org/docs/testsuite.html
+#   (or docs/testsuite)
+#
+# • http://build.i3wm.org/docs/lib-i3test.html
+#   (alternatively: perldoc ./testcases/lib/i3test.pm)
+#
+# • http://build.i3wm.org/docs/ipc.html
+#   (or docs/ipc)
+#
+# • http://onyxneon.com/books/modern_perl/modern_perl_a4.pdf
+#   (unless you are already familiar with Perl)
+#
+# Checks the workspace "blank" event semantics.
+#
+use i3test;
+
+SKIP: {
+
+    skip "AnyEvent::I3 too old (need >= 0.15)", 1 if $AnyEvent::I3::VERSION < 0.15;
+
+################################################################################
+# check that the workspace blank event is send when the last window was closed
+################################################################################
+subtest 'Workspace blank event', sub {
+    fresh_workspace;
+
+    my $cond = AnyEvent->condvar;
+    my $client = i3(get_socket_path(0));
+    $client->connect()->recv;
+    $client->subscribe({
+        workspace => sub {
+            my ($event) = @_;
+            $cond->send($event);
+        }
+    })->recv;
+
+    my $w1 = open_window();
+
+    cmd '[id="' . $w1->id . '"] kill';
+    sync_with_i3;
+
+    my $event = $cond->recv;
+    is($event->{change}, 'blank', '"Blank" event received after last window close');
+};
+
+################################################################################
+# check that no blank workspace event is send when the workspace is not empty
+# when a window was closed
+################################################################################
+subtest 'No workspace blank event', sub {
+    my $ws1 = fresh_workspace;
+    my $w1 = open_window();
+    my $w2 = open_window();
+    my $ws2 = fresh_workspace;
+    my $w3 = open_window();
+
+    is(focused_ws(), $ws2, 'Focused workspace is ws2');
+
+    my @events;
+    my $cond = AnyEvent->condvar;
+    my $client = i3(get_socket_path(0));
+    $client->connect()->recv;
+    $client->subscribe({
+        workspace => sub {
+            my ($event) = @_;
+            push @events, $event;
+        }
+    })->recv;
+
+    # Wait for the workspace event on a new connection. Events will be delivered
+    # to older connections earlier, so by the time it arrives here, it should be
+    # in @events already.
+    my $ws_event_block_conn = i3(get_socket_path(0));
+    $ws_event_block_conn->connect()->recv;
+    $ws_event_block_conn->subscribe({ workspace => sub { $cond->send(1) }});
+
+    cmd "workspace $ws1";
+    cmd 'open';
+
+    is(focused_ws(), $ws1, 'Focused workspace is ws1');
+
+    cmd '[id="' . $w1->id . '"] kill';
+    sync_with_i3;
+
+    my @expected_events = grep { $_->{change} eq 'focus' } @events;
+    my @blank_events = grep { $_->{change} eq 'blank' } @events;
+    is(@expected_events, 1, '"Focus" event received');
+    is(@blank_events, 0, 'No "blank" events received');
+};
+
+################################################################################
+# check that blank workspace event is send when switching to an empty workspace
+################################################################################
+subtest 'Workspace blank event when switching', sub {
+    my $ws2 = fresh_workspace;
+    my $ws1 = fresh_workspace;
+    my $w1 = open_window();
+
+    is(focused_ws(), $ws1, 'Focused workspace is ws1');
+
+    my $cond = AnyEvent->condvar;
+    my $client = i3(get_socket_path());
+    $client->connect()->recv;
+    $client->subscribe({
+        workspace => sub {
+            my ($event) = @_;
+            $cond->send($event);
+        }
+    })->recv;
+
+    cmd "workspace $ws2";
+    cmd 'open';
+
+    is(focused_ws(), $ws2, 'Focused workspace is ws2');
+
+    my $event = $cond->recv;
+    is($event->{change}, 'blank', '"Blank" event received upon workspace switch');
+};
+
+################################################################################
+# check that no workspace blank event is send when switching from an empty
+# workspace
+################################################################################
+subtest 'No workspace blank event when switching', sub {
+    my $ws1 = fresh_workspace;
+    my $window1 = open_window();
+    my $ws2 = fresh_workspace;
+
+    is(focused_ws(), $ws2, 'Focused workspace is ws2');
+
+    my @events;
+    my $client = i3(get_socket_path());
+    $client->connect()->recv;
+    $client->subscribe({
+        workspace => sub {
+            my ($event) = @_;
+            push @events, $event;
+        }
+    })->recv;
+
+    cmd "workspace $ws1";
+    cmd 'open';
+
+    is(focused_ws(), $ws1, 'Focused workspace is ws1');
+
+    my @focus_events = grep { $_->{change} eq 'focus' } @events;
+    my @blank_events = grep { $_->{change} eq 'blank' } @events;
+    is(@focus_events, 1, '"Focus" event received');
+    is(@blank_events, 0, 'No "blank" events received');
+};
+
+}
+
+done_testing;
-- 
1.7.10.4

