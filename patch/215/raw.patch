From 4f6ebdf51ac502836b3b7a405313b97294b89d01 Mon Sep 17 00:00:00 2001
From: koebi <koebischnell@â€¦>
Date: Sat, 7 Sep 2013 19:41:16 +0200
Subject: [PATCH] Run authentification in different process

fixes #895
---
 i3lock.c | 93 +++++++++++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 63 insertions(+), 30 deletions(-)

diff --git a/i3lock.c b/i3lock.c
index 74e15f2..8d15714 100644
--- a/i3lock.c
+++ b/i3lock.c
@@ -22,6 +22,7 @@
 #include <string.h>
 #include <ev.h>
 #include <sys/mman.h>
+#include <sys/wait.h>
 #include <X11/XKBlib.h>
 #include <X11/extensions/XKBfile.h>
 #include <xkbcommon/xkbcommon.h>
@@ -199,6 +200,50 @@ static void clear_input(void) {
     unlock_state = STATE_KEY_PRESSED;
 }
 
+static void auth_failed(void) {
+        if (debug_mode)
+            fprintf(stderr, "Authentication failure\n");
+        
+        pam_state = STATE_PAM_WRONG;
+        clear_input();
+        redraw_screen();
+
+        /* Clear this state after 2 seconds (unless the user enters another
+         * password during that time). */
+        ev_now_update(main_loop);
+        if ((clear_pam_wrong_timeout = calloc(sizeof(struct ev_timer), 1))) {
+            ev_timer_init(clear_pam_wrong_timeout, clear_pam_wrong, 2.0, 0.);
+            ev_timer_start(main_loop, clear_pam_wrong_timeout);
+        }
+
+        /* Cancel the clear_indicator_timeout, it would hide the unlock indicator
+         * too early. */
+        stop_clear_indicator_timeout();
+
+        /* beep on authentication failure, if enabled */
+        if (beep) {
+            xcb_bell(conn, 100);
+            xcb_flush(conn);
+        }
+}
+
+static void child_cb(EV_P_ ev_child *child_watcher, int revents) {
+    if (child_watcher->rstatus != 0) {
+        DEBUG("Authentication successfull\n");
+        clear_password_memory();
+
+        ev_child_stop(main_loop, child_watcher);
+        free(child_watcher);
+        
+        exit(0);
+    } else {
+        ev_child_stop(main_loop, child_watcher);
+        free(child_watcher);
+        
+        auth_failed();
+    }
+}
+
 static void input_done(void) {
     if (clear_pam_wrong_timeout) {
         ev_timer_stop(main_loop, clear_pam_wrong_timeout);
@@ -208,36 +253,24 @@ static void input_done(void) {
 
     pam_state = STATE_PAM_VERIFY;
     redraw_screen();
-
-    if (pam_authenticate(pam_handle, 0) == PAM_SUCCESS) {
-        DEBUG("successfully authenticated\n");
-        clear_password_memory();
-        exit(0);
-    }
-
-    if (debug_mode)
-        fprintf(stderr, "Authentication failure\n");
-
-    pam_state = STATE_PAM_WRONG;
-    clear_input();
-    redraw_screen();
-
-    /* Clear this state after 2 seconds (unless the user enters another
-     * password during that time). */
-    ev_now_update(main_loop);
-    if ((clear_pam_wrong_timeout = calloc(sizeof(struct ev_timer), 1))) {
-        ev_timer_init(clear_pam_wrong_timeout, clear_pam_wrong, 2.0, 0.);
-        ev_timer_start(main_loop, clear_pam_wrong_timeout);
-    }
-
-    /* Cancel the clear_indicator_timeout, it would hide the unlock indicator
-     * too early. */
-    stop_clear_indicator_timeout();
-
-    /* beep on authentication failure, if enabled */
-    if (beep) {
-        xcb_bell(conn, 100);
-        xcb_flush(conn);
+    
+    /* fork to unblock pam_authenticate */
+    pid_t cpid = fork();
+    if (cpid == 0) {
+        exit(pam_authenticate(pam_handle, 0) == PAM_SUCCESS);
+    } else if (cpid > 0) {
+        struct ev_child *child_watcher = calloc(sizeof(struct ev_io), 1);
+        ev_child_init(child_watcher, child_cb, cpid, 0);
+        ev_child_set(child_watcher, cpid, 0);
+        ev_child_start (EV_DEFAULT_ child_watcher);
+    } else if (cpid < 0) {
+        DEBUG("Could not fork");
+        if (pam_authenticate(pam_handle, 0) == PAM_SUCCESS) {
+            DEBUG("successfully authenticated\n");
+            clear_password_memory();
+            exit(0);
+        }
+        auth_failed();
     }
 }
 
-- 
1.8.4.rc3

