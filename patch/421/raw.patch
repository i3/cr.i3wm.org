From ae114fd69817e685bb74e63e44242158606d5264 Mon Sep 17 00:00:00 2001
From: Kernc <kerncece@â€¦>
Date: Wed, 12 Feb 2014 01:13:53 +0100
Subject: [PATCH] Better detect windows that want floating

Windows matching certain criteria are floated by default. Currently,
only windows of type DIALOG, UTILITY, TOOLBAR, or SPLASH were floated.

This patch introduces more robust detection of what windows should be
floated. Besides aforementioned types, also NORMAL windows are floated
if they are either of fixed size, modal, or marked as skipping pager
or taskbar, as are all other (EWMH) window types except DESKTOP and
DOCK.

Closes ticket #1182.
---
 include/atoms.xmacro |  7 +++++--
 include/xcb_compat.h |  2 ++
 src/manage.c         | 51 +++++++++++++++++++++++++++++++++++++++++----------
 3 files changed, 48 insertions(+), 12 deletions(-)

diff --git a/include/atoms.xmacro b/include/atoms.xmacro
index e6e72e7..9beb4bf 100644
--- a/include/atoms.xmacro
+++ b/include/atoms.xmacro
@@ -3,13 +3,16 @@ xmacro(_NET_SUPPORTING_WM_CHECK)
 xmacro(_NET_WM_NAME)
 xmacro(_NET_WM_STATE_FULLSCREEN)
 xmacro(_NET_WM_STATE_DEMANDS_ATTENTION)
+xmacro(_NET_WM_STATE_MODAL)
+xmacro(_NET_WM_STATE_SKIP_PAGER)
+xmacro(_NET_WM_STATE_SKIP_TASKBAR)
 xmacro(_NET_WM_STATE)
 xmacro(_NET_WM_WINDOW_TYPE)
 xmacro(_NET_WM_WINDOW_TYPE_DOCK)
 xmacro(_NET_WM_WINDOW_TYPE_DIALOG)
 xmacro(_NET_WM_WINDOW_TYPE_UTILITY)
-xmacro(_NET_WM_WINDOW_TYPE_TOOLBAR)
-xmacro(_NET_WM_WINDOW_TYPE_SPLASH)
+xmacro(_NET_WM_WINDOW_TYPE_DESKTOP)
+xmacro(_NET_WM_WINDOW_TYPE_NORMAL)
 xmacro(_NET_WM_DESKTOP)
 xmacro(_NET_WM_STRUT_PARTIAL)
 xmacro(_NET_CLIENT_LIST_STACKING)
diff --git a/include/xcb_compat.h b/include/xcb_compat.h
index 8803456..86dacc0 100644
--- a/include/xcb_compat.h
+++ b/include/xcb_compat.h
@@ -19,9 +19,11 @@
 #define XCB_ICCCM_WM_STATE_NORMAL XCB_WM_STATE_NORMAL
 #define XCB_ICCCM_WM_STATE_WITHDRAWN XCB_WM_STATE_WITHDRAWN
 #define xcb_icccm_get_wm_size_hints_from_reply xcb_get_wm_size_hints_from_reply
+#define xcb_icccm_get_wm_size_hints_reply xcb_get_wm_size_hints_reply
 #define xcb_icccm_get_wm_normal_hints_reply xcb_get_wm_normal_hints_reply
 #define xcb_icccm_get_wm_normal_hints_unchecked xcb_get_wm_normal_hints_unchecked
 #define XCB_ICCCM_SIZE_HINT_P_MIN_SIZE XCB_SIZE_HINT_P_MIN_SIZE
+#define XCB_ICCCM_SIZE_HINT_P_MAX_SIZE XCB_SIZE_HINT_P_MAX_SIZE
 #define XCB_ICCCM_SIZE_HINT_P_RESIZE_INC XCB_SIZE_HINT_P_RESIZE_INC
 #define XCB_ICCCM_SIZE_HINT_BASE_SIZE XCB_SIZE_HINT_BASE_SIZE
 #define XCB_ICCCM_SIZE_HINT_P_ASPECT XCB_SIZE_HINT_P_ASPECT
diff --git a/src/manage.c b/src/manage.c
index d84ba1b..72cc41e 100644
--- a/src/manage.c
+++ b/src/manage.c
@@ -105,6 +105,41 @@ static void ipc_send_window_new_event(Con *con) {
 }
 
 /*
+ * Hint whether window should be floating by default or not.
+ *
+ */
+static bool is_window_of_floating_type(xcb_window_t window,
+                                       xcb_get_property_reply_t *type_reply,
+                                       xcb_get_property_reply_t *state_reply) {
+    /* Never float desktop or docks. */
+    if (xcb_reply_contains_atom(type_reply, A__NET_WM_WINDOW_TYPE_DOCK) ||
+        xcb_reply_contains_atom(type_reply, A__NET_WM_WINDOW_TYPE_DESKTOP))
+        return false;
+
+    /* Only float normal windows if they are either of fixed size, modal,
+     * or marked as skip taskbar/pager. */
+    if (xcb_get_property_value_length(type_reply) == 0 ||  /* type not specified => NORMAL */
+        xcb_reply_contains_atom(type_reply, A__NET_WM_WINDOW_TYPE_NORMAL)) {
+        xcb_size_hints_t size_hints;
+        if (xcb_reply_contains_atom(state_reply, A__NET_WM_STATE_MODAL) ||
+            xcb_reply_contains_atom(state_reply, A__NET_WM_STATE_SKIP_PAGER) ||
+            xcb_reply_contains_atom(state_reply, A__NET_WM_STATE_SKIP_TASKBAR) ||
+            (xcb_icccm_get_wm_size_hints_reply(conn, xcb_icccm_get_wm_normal_hints_unchecked(conn, window), &size_hints, NULL) &&
+             size_hints.flags & XCB_ICCCM_SIZE_HINT_P_MAX_SIZE &&
+             size_hints.flags & XCB_ICCCM_SIZE_HINT_P_MIN_SIZE &&
+             size_hints.min_width == size_hints.max_width &&
+             size_hints.min_height == size_hints.max_height))
+            return true;
+        return false;
+    }
+
+    /* Other windows are floating. Some are typically override_redirect
+     * windows (and thus not even managed), but not necessarily. See:
+     * http://standards.freedesktop.org/wm-spec/latest/ar01s05.html#idp1333344 */
+    return true;
+}
+
+/*
  * Do some sanity checks and then reparent the window.
  *
  */
@@ -238,8 +273,8 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
     /* Where to start searching for a container that swallows the new one? */
     Con *search_at = croot;
 
-    xcb_get_property_reply_t *reply = xcb_get_property_reply(conn, wm_type_cookie, NULL);
-    if (xcb_reply_contains_atom(reply, A__NET_WM_WINDOW_TYPE_DOCK)) {
+    xcb_get_property_reply_t *type_reply = xcb_get_property_reply(conn, wm_type_cookie, NULL);
+    if (xcb_reply_contains_atom(type_reply, A__NET_WM_WINDOW_TYPE_DOCK)) {
         LOG("This window is of type dock\n");
         Output *output = get_output_containing(geom->x, geom->y);
         if (output != NULL) {
@@ -358,8 +393,6 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
         con_toggle_fullscreen(nc, CF_OUTPUT);
     }
 
-    FREE(state_reply);
-
     if (fs == NULL) {
         DLOG("Not in fullscreen mode, focusing\n");
         if (!cwindow->dock) {
@@ -392,15 +425,13 @@ void manage_window(xcb_window_t window, xcb_get_window_attributes_cookie_t cooki
 
     /* set floating if necessary */
     bool want_floating = false;
-    if (xcb_reply_contains_atom(reply, A__NET_WM_WINDOW_TYPE_DIALOG) ||
-        xcb_reply_contains_atom(reply, A__NET_WM_WINDOW_TYPE_UTILITY) ||
-        xcb_reply_contains_atom(reply, A__NET_WM_WINDOW_TYPE_TOOLBAR) ||
-        xcb_reply_contains_atom(reply, A__NET_WM_WINDOW_TYPE_SPLASH)) {
-        LOG("This window is a dialog window, setting floating\n");
+    if (is_window_of_floating_type(window, type_reply, state_reply)) {
+        LOG("This window is of a floating window type, setting floating\n");
         want_floating = true;
     }
 
-    FREE(reply);
+    FREE(state_reply);
+    FREE(type_reply);
 
     if (cwindow->transient_for != XCB_NONE ||
         (cwindow->leader != XCB_NONE &&
-- 
1.8.5.3

