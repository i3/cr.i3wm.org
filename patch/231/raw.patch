From 9ea15f68e49f9d3fe8a0e8537fe9dff8110f1b69 Mon Sep 17 00:00:00 2001
From: Bastian <bastian-i3-dev@…>
Date: Wed, 25 Sep 2013 09:23:48 +0200
Subject: [PATCH] new command line argument -g for i3-input options: -g
 <default,focused,WxH+X+Y> default: legacy behavior focused:
 i3-input widget is placed at top of the window with input
 focus WxH+X+Y: specify fixed position in X11 geometry style

---
 i3-input/i3-input.h |    2 +
 i3-input/main.c     |  144 +++++++++++++++++++++++++++++++++++++++++----------
 2 files changed, 118 insertions(+), 28 deletions(-)

diff --git a/i3-input/i3-input.h b/i3-input/i3-input.h
index f1d5f07..0348966 100644
--- a/i3-input/i3-input.h
+++ b/i3-input/i3-input.h
@@ -12,6 +12,8 @@
 } \
 while (0)
 
+xcb_rectangle_t geometry;
+
 extern xcb_window_t root;
 
 #endif
diff --git a/i3-input/main.c b/i3-input/main.c
index 49db4df..6cfa133 100644
--- a/i3-input/main.c
+++ b/i3-input/main.c
@@ -55,6 +55,7 @@ xcb_window_t root;
 xcb_connection_t *conn;
 xcb_screen_t *root_screen;
 static xcb_get_input_focus_cookie_t focus_cookie;
+static xcb_get_input_focus_reply_t *focus_reply;
 
 /*
  * Having verboselog() and errorlog() is necessary when using libi3.
@@ -84,13 +85,7 @@ void errorlog(char *fmt, ...) {
  *
  */
 static void restore_input_focus(void) {
-    xcb_generic_error_t *error;
-    xcb_get_input_focus_reply_t *reply = xcb_get_input_focus_reply(conn, focus_cookie, &error);
-    if (error != NULL) {
-        fprintf(stderr, "[i3-input] ERROR: Could not restore input focus (X error %d)\n", error->error_code);
-        return;
-    }
-    xcb_set_input_focus(conn, XCB_INPUT_FOCUS_POINTER_ROOT, reply->focus, XCB_CURRENT_TIME);
+    xcb_set_input_focus(conn, XCB_INPUT_FOCUS_POINTER_ROOT, focus_reply->focus, XCB_CURRENT_TIME);
     xcb_flush(conn);
 }
 
@@ -122,11 +117,12 @@ static uint8_t *concat_strings(char **glyphs, int max) {
  * be called from the code with event == NULL or from X with event != NULL.
  *
  */
-static int handle_expose(void *data, xcb_connection_t *conn, xcb_expose_event_t *event) {
+static int handle_expose(void *data, xcb_connection_t *conn, xcb_expose_event_t *event, xcb_rectangle_t* geometry) {
     printf("expose!\n");
 
     /* re-draw the background */
-    xcb_rectangle_t border = {0, 0, 500, font.height + 8}, inner = {2, 2, 496, font.height + 8 - 4};
+    xcb_rectangle_t border = {0, 0, geometry->width, geometry->height},
+                    inner = {2, 2, geometry->width-4, geometry->height - 4};
     xcb_change_gc(conn, pixmap_gc, XCB_GC_FOREGROUND, (uint32_t[]){ get_colorpixel("#FF0000") });
     xcb_poly_fill_rectangle(conn, pixmap, pixmap_gc, 1, &border);
     xcb_change_gc(conn, pixmap_gc, XCB_GC_FOREGROUND, (uint32_t[]){ get_colorpixel("#000000") });
@@ -137,18 +133,18 @@ static int handle_expose(void *data, xcb_connection_t *conn, xcb_expose_event_t
 
     /* draw the prompt … */
     if (prompt != NULL) {
-        draw_text(prompt, pixmap, pixmap_gc, 4, 4, 492);
+        draw_text(prompt, pixmap, pixmap_gc, 4, 4, geometry->width-8);
     }
     /* … and the text */
     if (input_position > 0)
     {
         i3String *input = i3string_from_ucs2(glyphs_ucs, input_position);
-        draw_text(input, pixmap, pixmap_gc, prompt_offset + 4, 4, 492);
+        draw_text(input, pixmap, pixmap_gc, prompt_offset + 4, 4, geometry->width-8);
         i3string_free(input);
     }
 
     /* Copy the contents of the pixmap to the real window */
-    xcb_copy_area(conn, pixmap, win, pixmap_gc, 0, 0, 0, 0, /* */ 500, font.height + 8);
+    xcb_copy_area(conn, pixmap, win, pixmap_gc, 0, 0, 0, 0, /* */ geometry->width, geometry->height);
     xcb_flush(conn);
 
     return 1;
@@ -227,7 +223,7 @@ static void finish_input() {
  * command to i3).
  *
  */
-static int handle_key_press(void *ignored, xcb_connection_t *conn, xcb_key_press_event_t *event) {
+static int handle_key_press(void *ignored, xcb_connection_t *conn, xcb_key_press_event_t *event, xcb_rectangle_t* geometry) {
     printf("Keypress %d, state raw = %d\n", event->detail, event->state);
 
     /* See the documentation of xcb_key_symbols_get_keysym for this one.
@@ -257,7 +253,7 @@ static int handle_key_press(void *ignored, xcb_connection_t *conn, xcb_key_press
         input_position--;
         free(glyphs_utf8[input_position]);
 
-        handle_expose(NULL, conn, NULL);
+        handle_expose(NULL, conn, NULL, geometry);
         return 1;
     }
     if (sym == XK_Escape) {
@@ -302,15 +298,88 @@ static int handle_key_press(void *ignored, xcb_connection_t *conn, xcb_key_press
     if (input_position == limit)
         finish_input();
 
-    handle_expose(NULL, conn, NULL);
+    handle_expose(NULL, conn, NULL, geometry);
     return 1;
 }
 
+
+xcb_rectangle_t* compute_geometry(char* geometry_arg) {
+    xcb_get_geometry_cookie_t focused_geometry_cookie;
+    xcb_get_geometry_reply_t *focused_geometry_reply;
+    xcb_translate_coordinates_reply_t *trans_reply;
+    xcb_generic_error_t *error;
+    xcb_rectangle_t* geometry = malloc( sizeof (xcb_rectangle_t) );
+    unsigned int scan_w, scan_h;
+    int scan_x, scan_y;
+
+    /* set default geometry */
+    geometry->x = 50; geometry->y = 50;
+    geometry->width = 500; geometry->height = 0;  /* if h==0: h=font.size + 8 */
+
+    if( strcasecmp(geometry_arg, "default") == 0 ) {
+        fprintf(stdout, "applying default geometry\n");
+    } else if( sscanf(geometry_arg, "%ux%u%d%d",
+                &scan_w, &scan_h, &scan_x, &scan_y) == 4 ) {
+        geometry->width = (uint16_t) scan_w;
+        geometry->height = (uint16_t) scan_h;
+        geometry->x = (int16_t) scan_x;
+        geometry->y = (int16_t) scan_y;
+        fprintf(stdout, "fixed geometry parsed from argument is %dx%d+%d+%d\n",
+                geometry->width, geometry->height,
+                geometry->x, geometry->y );
+    } else if( strcasecmp(geometry_arg, "focused") == 0 ) {
+        fprintf(stdout, "geometry will be applyed to currently focused window, if any\n");
+        focused_geometry_cookie = xcb_get_geometry(conn, focus_reply->focus);
+        focused_geometry_reply = xcb_get_geometry_reply(conn, focused_geometry_cookie, &error);
+        if (error != NULL) {
+            fprintf(stderr, "[i3-input] ERROR: Could not get geometry of focused window (X error %d)\n", error->error_code);
+            return geometry;
+        }
+        printf("Geometry of focused window is: %ux%u%+d%+d\n",
+                focused_geometry_reply->width, focused_geometry_reply->height,
+                focused_geometry_reply->x, focused_geometry_reply->y);
+        /* When firefox/vimperator has the input focus, function
+         * xcb_get_input_focus returns the id of a child window of firefox, which
+         * has the dimension 1x1. I am too unexperienced with xcb to debug this.
+         * So here is just a silly workaround to set the default size
+         * This is a workaround, please sb improve !
+         * */
+        if( focused_geometry_reply->width <= 1 ) {
+            focused_geometry_reply->width = 500;
+        }
+
+        trans_reply = xcb_translate_coordinates_reply(
+                conn,
+                xcb_translate_coordinates(conn, focus_reply->focus, root,
+                    focused_geometry_reply->x, focused_geometry_reply->y),
+                &error);
+        if (error != NULL) {
+            fprintf(stderr, "[i3-input] ERROR: Could not translate coordiantes for focused window (X error %d)\n",
+                    error->error_code);
+            return geometry;
+        }
+        fprintf(stdout, "Translated coordinates are: %+d%+d\n", trans_reply->dst_x, trans_reply->dst_y);
+        geometry->width=focused_geometry_reply->width - 10;
+        geometry->height=0;
+        geometry->x=trans_reply->dst_x + 5;
+        geometry->y=trans_reply->dst_y + 5;
+    } else {
+        fprintf(stderr, "[i3-input] ERROR: could not understand geometry argument %s.\n", geometry_arg);
+        return geometry;
+    }
+
+
+    return geometry;
+}
+
 int main(int argc, char *argv[]) {
-    format = strdup("%s");
+    format = sstrdup("%s");
     socket_path = getenv("I3SOCK");
     char *pattern = sstrdup("-misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1");
     int o, option_index = 0;
+    xcb_generic_error_t *error;
+    char* geometry_arg = sstrdup("default");
+    xcb_rectangle_t* geometry = NULL;
 
     static struct option long_options[] = {
         {"socket", required_argument, 0, 's'},
@@ -321,16 +390,17 @@ int main(int argc, char *argv[]) {
         {"format", required_argument, 0, 'F'},
         {"font", required_argument, 0, 'f'},
         {"help", no_argument, 0, 'h'},
+        {"geometry", required_argument, 0, 'g'},
         {0, 0, 0, 0}
     };
 
-    char *options_string = "s:p:P:f:l:F:vh";
+    char *options_string = "s:p:P:f:l:F:vhg:";
 
     while ((o = getopt_long(argc, argv, options_string, long_options, &option_index)) != -1) {
         switch (o) {
             case 's':
                 FREE(socket_path);
-                socket_path = strdup(optarg);
+                socket_path = sstrdup(optarg);
                 break;
             case 'v':
                 printf("i3-input " I3_VERSION);
@@ -350,15 +420,19 @@ int main(int argc, char *argv[]) {
                 break;
             case 'f':
                 FREE(pattern);
-                pattern = strdup(optarg);
+                pattern = sstrdup(optarg);
                 break;
             case 'F':
                 FREE(format);
-                format = strdup(optarg);
+                format = sstrdup(optarg);
+                break;
+            case 'g':
+                FREE(geometry_arg);
+                geometry_arg = sstrdup(optarg);
                 break;
             case 'h':
                 printf("i3-input " I3_VERSION "\n");
-                printf("i3-input [-s <socket>] [-F <format>] [-l <limit>] [-P <prompt>] [-f <font>] [-v]\n");
+                printf("i3-input [-s <socket>] [-F <format>] [-l <limit>] [-P <prompt>] [-f <font>] [-v] [-g <default|focused|WxH+X+Y>]\n");
                 printf("\n");
                 printf("Example:\n");
                 printf("    i3-input -F 'workspace \"%%s\"' -P 'Switch to workspace: '\n");
@@ -381,17 +455,30 @@ int main(int argc, char *argv[]) {
     if (!conn || xcb_connection_has_error(conn))
         die("Cannot open display\n");
 
-    /* Request the current InputFocus to restore when i3-input exits. */
-    focus_cookie = xcb_get_input_focus(conn);
-
     root_screen = xcb_aux_get_screen(conn, screens);
     root = root_screen->root;
 
+    /* fetch the currently focused window */
+    focus_cookie = xcb_get_input_focus(conn);
+    focus_reply = xcb_get_input_focus_reply(conn, focus_cookie, &error);
+    if (error != NULL) {
+        fprintf(stderr, "[i3-input] ERROR: Could get currently focused window (X error %d)\n", error->error_code);
+    }
+    printf("Focused window is %x\n", focus_reply->focus);
+
     symbols = xcb_key_symbols_alloc(conn);
 
     font = load_font(pattern, true);
     set_font(&font);
 
+    geometry =  compute_geometry(geometry_arg);
+    if ( geometry->height == 0 ) {
+        geometry->height = font.height + 8;
+    }
+    fprintf(stdout, "[i3-input] INFO: using geometry %dx%d+%d+%d\n",
+            geometry->width, geometry->height,
+            geometry->x, geometry->y);
+
     if (prompt != NULL)
         prompt_offset = predict_text_width(prompt);
 
@@ -402,7 +489,7 @@ int main(int argc, char *argv[]) {
         XCB_COPY_FROM_PARENT,
         win, /* the window id */
         root, /* parent == root */
-        50, 50, 500, font.height + 8, /* dimensions */
+        geometry->x, geometry->y, geometry->width, geometry->height, /* dimensions */
         0, /* X11 border = 0, we draw our own */
         XCB_WINDOW_CLASS_INPUT_OUTPUT,
         XCB_WINDOW_CLASS_COPY_FROM_PARENT, /* copy visual from parent */
@@ -419,7 +506,8 @@ int main(int argc, char *argv[]) {
     /* Create pixmap */
     pixmap = xcb_generate_id(conn);
     pixmap_gc = xcb_generate_id(conn);
-    xcb_create_pixmap(conn, root_screen->root_depth, pixmap, win, 500, font.height + 8);
+    xcb_create_pixmap(conn, root_screen->root_depth, pixmap, win,
+            geometry->width, geometry->height);
     xcb_create_gc(conn, pixmap_gc, pixmap, 0, 0);
 
     /* Set input focus (we have override_redirect=1, so the wm will not do
@@ -462,7 +550,7 @@ int main(int argc, char *argv[]) {
 
         switch (type) {
             case XCB_KEY_PRESS:
-                handle_key_press(NULL, conn, (xcb_key_press_event_t*)event);
+                handle_key_press(NULL, conn, (xcb_key_press_event_t*)event, geometry);
                 break;
 
             case XCB_KEY_RELEASE:
@@ -470,7 +558,7 @@ int main(int argc, char *argv[]) {
                 break;
 
             case XCB_EXPOSE:
-                handle_expose(NULL, conn, (xcb_expose_event_t*)event);
+                handle_expose(NULL, conn, (xcb_expose_event_t*)event, geometry);
                 break;
         }
 
-- 
1.7.10.4

