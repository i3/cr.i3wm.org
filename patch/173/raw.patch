From ef3aabed5ec441b9ca66af083eacdf4681f05d88 Mon Sep 17 00:00:00 2001
From: Alexander Berntsen <alexander@â€¦>
Date: Wed, 5 Jun 2013 15:04:57 +0200
Subject: [PATCH 2/4] Implement shmlog command

Add shmlog command that takes <size>|flip|on|off. Separate logbuffer
management into open_logbuffer() and close_logbuffer(). Make
t/187-commands-parser.t expect 'shmlog'.
---
 include/commands.h                |  6 ++++++
 include/log.h                     | 12 ++++++++++++
 parser-specs/commands.spec        |  7 +++++++
 src/commands.c                    | 15 +++++++++++++++
 src/log.c                         | 35 +++++++++++++++++++++++++++--------
 testcases/t/187-commands-parser.t |  2 +-
 6 files changed, 68 insertions(+), 9 deletions(-)

diff --git a/include/commands.h b/include/commands.h
index 87f0ac1..07a65c2 100644
--- a/include/commands.h
+++ b/include/commands.h
@@ -271,4 +271,10 @@ void cmd_rename_workspace(I3_CMD, char *old_name, char *new_name);
  */
 void cmd_bar(I3_CMD, char *bar_type, char *bar_value, char *bar_id);
 
+/*
+ * Implementation of 'shmlog <size>|flip|on|off'
+ *
+ */
+void cmd_shmlog(I3_CMD, char *argument);
+
 #endif
diff --git a/include/log.h b/include/log.h
index 6fabeca..c9d1d0c 100644
--- a/include/log.h
+++ b/include/log.h
@@ -39,6 +39,18 @@ extern int shmlog_size;
 void init_logging(void);
 
 /**
+ * Opens the logbuffer.
+ *
+ */
+void open_logbuffer(void);
+
+/**
+ * Closes the logbuffer.
+ *
+ */
+void close_logbuffer(void);
+
+/**
  * Set debug logging.
  *
  */
diff --git a/parser-specs/commands.spec b/parser-specs/commands.spec
index 12737a2..9f151aa 100644
--- a/parser-specs/commands.spec
+++ b/parser-specs/commands.spec
@@ -19,6 +19,7 @@ state INITIAL:
   'exit' -> call cmd_exit()
   'restart' -> call cmd_restart()
   'reload' -> call cmd_reload()
+  'shmlog' -> SHMLOG
   'border' -> BORDER
   'layout' -> LAYOUT
   'append_layout' -> APPEND_LAYOUT
@@ -62,6 +63,12 @@ state EXEC:
   command = string
       -> call cmd_exec($nosn, $command)
 
+# shmlog <size>|flip|on|off
+state SHMLOG:
+  # argument may be a number
+  argument = string
+    -> call cmd_shmlog($argument)
+
 # border normal|none|1pixel|toggle|1pixel
 state BORDER:
   border_style = 'normal', 'pixel'
diff --git a/src/commands.c b/src/commands.c
index f361f86..8b2d850 100644
--- a/src/commands.c
+++ b/src/commands.c
@@ -13,6 +13,8 @@
 #include <stdarg.h>
 
 #include "all.h"
+/* SHMLOG_SIZE */
+#include "shmlog.h"
 
 // Macros to make the YAJL API a bit easier to use.
 #define y(x, ...) yajl_gen_ ## x (cmd_output->json_gen, ##__VA_ARGS__)
@@ -2027,3 +2029,16 @@ void cmd_bar(I3_CMD, char *bar_type, char *bar_value, char *bar_id) {
 
     update_barconfig();
 }
+
+/*
+ * Implementation of 'shmlog <size>|flip|on|off'
+ *
+ */
+void cmd_shmlog(I3_CMD, char *argument) {
+    shmlog_size = !strcmp(argument, "flip") ? shmlog_size ? -shmlog_size :
+        SHMLOG_SIZE : !strcmp(argument, "off") ? 0 : !strcmp(argument, "on") ?
+        SHMLOG_SIZE : atoi(argument);
+    LOG("%s shm logging\n", shmlog_size > 0 ? "Enabling" : "Disabling");
+    init_logging();
+    ysuccess(true);
+}
diff --git a/src/log.c b/src/log.c
index 0269fb2..88f2ffc 100644
--- a/src/log.c
+++ b/src/log.c
@@ -89,10 +89,23 @@ void init_logging(void) {
             }
         }
     }
+    /* Start SHM logging if shmlog_size is > 0. shmlog_size is SHMLOG_SIZE by
+     * default on development versions, and 0 on release versions. If it is
+     * not > 0, the user has turned it off, so let's close the logbuffer. Note
+     * that this does not handle size changes, only turning the log off or on
+     * (optionally with a size defined). */
+     if (shmlog_size > 0 && logbuffer == NULL)
+        open_logbuffer();
+     else if (logbuffer)
+        close_logbuffer();
+     atexit(purge_zerobyte_logfile);
+}
 
-    /* If this is a debug build (not a release version), we will enable SHM
-     * logging by default, unless the user turned it off explicitly. */
-    if (logbuffer == NULL && shmlog_size > 0) {
+/*
+ * Opens the logbuffer.
+ *
+ */
+void open_logbuffer(void) {
         /* Reserve 1% of the RAM for the logfile, but at max 25 MiB.
          * For 512 MiB of RAM this will lead to a 5 MiB log buffer.
          * At the moment (2011-12-10), no testcase leads to an i3 log
@@ -127,10 +140,8 @@ void init_logging(void) {
 
         logbuffer = mmap(NULL, logbuffer_size, PROT_READ | PROT_WRITE, MAP_SHARED, logbuffer_shm, 0);
         if (logbuffer == MAP_FAILED) {
-            close(logbuffer_shm);
-            shm_unlink(shmlogname);
+            close_logbuffer();
             fprintf(stderr, "Could not mmap SHM segment for the i3 log: %s\n", strerror(errno));
-            logbuffer = NULL;
             return;
         }
 
@@ -148,8 +159,16 @@ void init_logging(void) {
         logwalk = logbuffer + sizeof(i3_shmlog_header);
         loglastwrap = logbuffer + logbuffer_size;
         store_log_markers();
-    }
-    atexit(purge_zerobyte_logfile);
+}
+
+/*
+ * Closes the logbuffer.
+ *
+ */
+void close_logbuffer(void) {
+    close(logbuffer_shm);
+    shm_unlink(shmlogname);
+    logbuffer = NULL;
 }
 
 /*
diff --git a/testcases/t/187-commands-parser.t b/testcases/t/187-commands-parser.t
index 65c7212..a6bb1c5 100644
--- a/testcases/t/187-commands-parser.t
+++ b/testcases/t/187-commands-parser.t
@@ -144,7 +144,7 @@ is(parser_calls("\nworkspace test"),
 ################################################################################
 
 is(parser_calls('unknown_literal'),
-   "ERROR: Expected one of these tokens: <end>, '[', 'move', 'exec', 'exit', 'restart', 'reload', 'border', 'layout', 'append_layout', 'workspace', 'focus', 'kill', 'open', 'fullscreen', 'split', 'floating', 'mark', 'resize', 'rename', 'nop', 'scratchpad', 'mode', 'bar'\n" .
+   "ERROR: Expected one of these tokens: <end>, '[', 'move', 'exec', 'exit', 'restart', 'reload', 'shmlog', 'border', 'layout', 'append_layout', 'workspace', 'focus', 'kill', 'open', 'fullscreen', 'split', 'floating', 'mark', 'resize', 'rename', 'nop', 'scratchpad', 'mode', 'bar'\n" .
    "ERROR: Your command: unknown_literal\n" .
    "ERROR:               ^^^^^^^^^^^^^^^",
    'error for unknown literal ok');
-- 
1.8.1.5

