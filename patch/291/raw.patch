From e6d6812420f431e87f9ff14d89d481594be50d25 Mon Sep 17 00:00:00 2001
From: Tony Crisci <tony@…>
Date: Thu, 31 Oct 2013 20:36:31 -0400
Subject: [PATCH] Return DRAG_ABORT on UnmapNotify from drag_pointer

Add DRAG_ABORT to enum drag_result_t. DRAG_ABORT will indicate the drag
operation cannot be completed.

Return DRAG_ABORT on UnmapNotify, or when the keyboard or pointer cannot
be grabbed.

Add DRAGGING to return value for drag_result_t. DRAGGING is used
internally by drag_pointer to indicate the drag is in progress.

Fixes an issue that caused i3 to crash when a user is dragging or
resizing a floating window that becomes destroyed.
---
 include/floating.h | 21 +++++++++++++++++----
 src/floating.c     | 26 ++++++++++++++------------
 2 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/include/floating.h b/include/floating.h
index 04db158..d861989 100644
--- a/include/floating.h
+++ b/include/floating.h
@@ -134,12 +134,25 @@ void floating_toggle_hide(xcb_connection_t *conn, Workspace *workspace);
 
 #endif
 /**
- * This is the return value of a drag operation like drag_pointer. DRAG_CANCEL
- * will indicate the intention of the drag should not be carried out, or that
- * the drag actions should be undone.
+ * This is the return value of a drag operation like drag_pointer.
+ *
+ * DRAG_SUCCESS will indicate the intention of the drag action should be
+ * carried out.
+ *
+ * DRAG_CANCEL will indicate that the drag was stopped by a user action, and an
+ * attempt should be made to restore the state of the involved windows to their
+ * condition before the drag.
+ *
+ * DRAG_ABORT will indicate that the intention of the drag action cannot be
+ * carried out (e.g. because the window has been unmapped).
  *
  */
-typedef enum { DRAG_SUCCESS = 0, DRAG_CANCEL } drag_result_t;
+typedef enum {
+    DRAGGING = 0,
+    DRAG_SUCCESS,
+    DRAG_CANCEL,
+    DRAG_ABORT
+} drag_result_t;
 
 /**
  * This function grabs your pointer and keyboard and lets you drag stuff around
diff --git a/src/floating.c b/src/floating.c
index ae1a919..6c3cf12 100644
--- a/src/floating.c
+++ b/src/floating.c
@@ -601,7 +601,7 @@ drag_result_t drag_pointer(Con *con, const xcb_button_press_event_t *event, xcb_
 
     if ((reply = xcb_grab_pointer_reply(conn, cookie, NULL)) == NULL) {
         ELOG("Could not grab pointer\n");
-        return DRAG_CANCEL;
+        return DRAG_ABORT;
     }
 
     free(reply);
@@ -620,7 +620,7 @@ drag_result_t drag_pointer(Con *con, const xcb_button_press_event_t *event, xcb_
 
     if ((keyb_reply = xcb_grab_keyboard_reply(conn, keyb_cookie, NULL)) == NULL) {
         ELOG("Could not grab keyboard\n");
-        return DRAG_CANCEL;
+        return DRAG_ABORT;
     }
 
     free(keyb_reply);
@@ -629,11 +629,11 @@ drag_result_t drag_pointer(Con *con, const xcb_button_press_event_t *event, xcb_
     xcb_flush(conn);
 
     xcb_generic_event_t *inside_event, *last_motion_notify = NULL;
-    bool loop_done = false;
-    /* The return value, set to DRAG_CANCEL on user cancel */
-    drag_result_t drag_result = DRAG_SUCCESS;
+    Con *inside_con = NULL;
+    /* The return value, set to exit the event loop */
+    drag_result_t drag_result = DRAGGING;
     /* I’ve always wanted to have my own eventhandler… */
-    while (!loop_done && (inside_event = xcb_wait_for_event(conn))) {
+    while (drag_result == DRAGGING && (inside_event = xcb_wait_for_event(conn))) {
         /* We now handle all events we can get using xcb_poll_for_event */
         do {
             /* skip x11 errors */
@@ -646,7 +646,7 @@ drag_result_t drag_pointer(Con *con, const xcb_button_press_event_t *event, xcb_
 
             switch (type) {
                 case XCB_BUTTON_RELEASE:
-                    loop_done = true;
+                    drag_result = DRAG_SUCCESS;
                     break;
 
                 case XCB_MOTION_NOTIFY:
@@ -656,16 +656,18 @@ drag_result_t drag_pointer(Con *con, const xcb_button_press_event_t *event, xcb_
                     break;
 
                 case XCB_UNMAP_NOTIFY:
-                    DLOG("Unmap-notify, aborting\n");
+                    inside_con = con_by_window_id(((xcb_unmap_notify_event_t*)inside_event)->window);
+
+                    DLOG("UnmapNotify for window 0x%08x (container %p)\n", ((xcb_unmap_notify_event_t*)inside_event)->window, inside_con);
+                    DLOG("UnmapNotify, aborting\n");
+                    drag_result = DRAG_ABORT;
+
                     handle_event(type, inside_event);
-                    loop_done = true;
-                    drag_result = DRAG_CANCEL;
                     break;
 
                 case XCB_KEY_PRESS:
                     /* Cancel the drag if a key was pressed */
                     DLOG("A key was pressed during drag, canceling.");
-                    loop_done = true;
                     drag_result = DRAG_CANCEL;
 
                     handle_event(type, inside_event);
@@ -681,7 +683,7 @@ drag_result_t drag_pointer(Con *con, const xcb_button_press_event_t *event, xcb_
                 free(inside_event);
         } while ((inside_event = xcb_poll_for_event(conn)) != NULL);
 
-        if (last_motion_notify == NULL || loop_done)
+        if (last_motion_notify == NULL || drag_result != DRAGGING)
             continue;
 
         new_x = ((xcb_motion_notify_event_t*)last_motion_notify)->root_x;
-- 
1.8.4.2

