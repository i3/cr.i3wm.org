From ca2a7d3637f2b5490500e556969cbb61a0b20c01 Mon Sep 17 00:00:00 2001
From: Alexander Monakov <amonakov@â€¦>
Date: Sun, 7 Dec 2014 18:11:05 +0300
Subject: [PATCH] Use nl80211 to retrieve wireless stats on Linux (#1082)

This initial cut does not support "bitrate", "quality" and "noise": to obtain
those, an additional netlink request would be required.

To minimize the amount of syscalls done on each update, netlink socket is kept
open and some auxiliary information is cached.  For now, interface id is
cached in a naive way, which prevent running multiple instances of the plugin.
---
 Makefile                  |   5 +-
 src/print_wireless_info.c | 247 ++++++++++++++++++++--------------------------
 2 files changed, 112 insertions(+), 140 deletions(-)

diff --git a/Makefile b/Makefile
index 625b522..a533fe7 100644
--- a/Makefile
+++ b/Makefile
@@ -26,7 +26,10 @@ OS:=$(shell uname)
 ifeq ($(OS),Linux)
 CPPFLAGS+=-DLINUX
 CPPFLAGS+=-D_GNU_SOURCE
-LIBS+=-liw
+CFLAGS += $(shell pkg-config --cflags libnl-3.0)
+CFLAGS += $(shell pkg-config --cflags libnl-genl-3.0)
+LIBS += $(shell pkg-config --libs libnl-3.0)
+LIBS += $(shell pkg-config --libs libnl-genl-3.0)
 LIBS+=-lasound
 endif
 
diff --git a/src/print_wireless_info.c b/src/print_wireless_info.c
index 7f7c52e..de2e31e 100644
--- a/src/print_wireless_info.c
+++ b/src/print_wireless_info.c
@@ -5,12 +5,13 @@
 #include <yajl/yajl_version.h>
 
 #ifdef LINUX
-#include <iwlib.h>
-#else
-#ifndef __FreeBSD__
+#include <net/if.h>
+#include <netlink/netlink.h>
+#include <netlink/genl/genl.h>
+#include <netlink/genl/ctrl.h>
+#include <linux/nl80211.h>
 #define IW_ESSID_MAX_SIZE 32
 #endif
-#endif
 
 #ifdef __FreeBSD__
 #include <sys/param.h>
@@ -69,135 +70,114 @@ typedef struct {
         int signal_level_max;
         int noise_level;
         int noise_level_max;
-        int bitrate;
-        double frequency;
+        int frequency_mhz;
 } wireless_info_t;
 
+#ifdef LINUX
+static struct {
+        wireless_info_t *info;
+        int status;
+} gwi_data;
+
+static int gwi_scan_cb(struct nl_msg *msg, void *unused_arg) {
+        struct nlattr *nla_bss, *nla;
+        int rem;
+        struct genlmsghdr *gnlh = genlmsg_hdr(nlmsg_hdr(msg));
+        if (!(nla_bss = nla_find(genlmsg_attrdata(gnlh, 0), genlmsg_attrlen(gnlh, 0), NL80211_ATTR_BSS)))
+                return NL_SKIP;
+
+        unsigned char *ie_ptr = 0;
+        int frequency = 0, signal = 0, signal_max = 0, ie_len = 0, connected = 0;
+        nla_for_each_nested(nla, nla_bss, rem) {
+                int type = nla_type(nla);
+                if (type == NL80211_BSS_FREQUENCY) {
+                        frequency = nla_get_u32(nla);
+                } else if (type == NL80211_BSS_SIGNAL_UNSPEC) {
+                        signal = nla_get_u8(nla);
+                        signal_max = 100;
+                } else if (type == NL80211_BSS_SIGNAL_MBM) {
+                        signal = (int)nla_get_u32(nla) / 100;
+                } else if (type == NL80211_BSS_INFORMATION_ELEMENTS) {
+                        ie_ptr = nla_data(nla);
+                        ie_len = nla_len(nla);
+                } else if (type == NL80211_BSS_STATUS) {
+                        connected = 1;
+                }
+        }
+        if (!connected)
+                return NL_SKIP;
+
+        wireless_info_t *info = gwi_data.info;
+        if (frequency) {
+                info->flags |= WIRELESS_INFO_FLAG_HAS_FREQUENCY;
+                info->frequency_mhz = frequency;
+        }
+        if (signal) {
+                info->flags |= WIRELESS_INFO_FLAG_HAS_SIGNAL;
+                info->signal_level = signal;
+                info->signal_level_max = signal_max;
+        }
+        while (ie_len >= 2) {
+                int len = ie_ptr[1] + 2;
+                if (ie_len < len)
+                        break;
+                if (ie_ptr[0] == 0) {
+                        info->flags |= WIRELESS_INFO_FLAG_HAS_ESSID;
+                        snprintf(info->essid, sizeof(info->essid), "%.*s", len - 2, ie_ptr + 2);
+                        break;
+                }
+                ie_len -= len;
+                ie_ptr += len;
+        }
+        gwi_data.status = 1;
+        return NL_SKIP;
+}
+
+static int get_wireless_info_nl80211(const char *interface, wireless_info_t *info) {
+        static struct nl_sock *sk;
+        if (!sk) {
+                if (!(sk = nl_socket_alloc()))
+                        return 0;
+                if (genl_connect(sk) < 0
+                    || nl_socket_modify_cb(sk, NL_CB_VALID, NL_CB_CUSTOM, gwi_scan_cb, 0) < 0) {
+                        nl_socket_free(sk);
+                        sk = 0;
+                        return 0;
+                }
+        }
+
+        static int family;
+        if (!(family || (family = genl_ctrl_resolve(sk, "nl80211"))))
+                return 0;
+
+        /* For now, assume only one instance and cache ifidx */
+        static unsigned ifidx;
+        if (!(ifidx || (ifidx = if_nametoindex(interface))))
+                return 0;
+
+        struct nl_msg *msg;
+        if (!(msg = nlmsg_alloc()))
+                return 0;
+
+        if (!genlmsg_put(msg, NL_AUTO_PORT, NL_AUTO_SEQ, family, 0, NLM_F_DUMP, NL80211_CMD_GET_SCAN, 0)
+            || nla_put_u32(msg, NL80211_ATTR_IFINDEX, ifidx) < 0) {
+                nlmsg_free(msg);
+                return 0;
+        }
+
+        gwi_data.info = info;
+        gwi_data.status = 0;
+        if (nl_send_sync(sk, msg) < 0)
+                return 0;
+        return gwi_data.status;
+}
+#endif
+
 static int get_wireless_info(const char *interface, wireless_info_t *info) {
         memset(info, 0, sizeof(wireless_info_t));
 
 #ifdef LINUX
-        int skfd = iw_sockets_open();
-        if (skfd < 0) {
-                perror("iw_sockets_open");
-                return 0;
-        }
-
-        wireless_config wcfg;
-        if (iw_get_basic_config(skfd, interface, &wcfg) < 0) {
-            close(skfd);
-            return 0;
-        }
-
-        if (wcfg.has_essid && wcfg.essid_on) {
-                info->flags |= WIRELESS_INFO_FLAG_HAS_ESSID;
-                strncpy(&info->essid[0], wcfg.essid, IW_ESSID_MAX_SIZE);
-                info->essid[IW_ESSID_MAX_SIZE] = '\0';
-        }
-
-        if (wcfg.has_freq) {
-                info->frequency = wcfg.freq;
-                info->flags |= WIRELESS_INFO_FLAG_HAS_FREQUENCY;
-        }
-
-        /* If the function iw_get_stats does not return proper stats, the
-           wifi is considered as down.
-           Since ad-hoc network does not have theses stats, we need to return
-           here for this mode. */
-        if (wcfg.mode == 1) {
-                close(skfd);
-                return 1;
-        }
-
-        /* Wireless quality is a relative value in a driver-specific range.
-           Signal and noise level can be either relative or absolute values
-           in dBm. Furthermore, noise and quality can be expressed directly
-           in dBm or in RCPI (802.11k), which we convert to dBm. When those
-           values are expressed directly in dBm, they range from -192 to 63,
-           and since the values are packed into 8 bits, we need to perform
-           8-bit arithmetic on them. Assume absolute values if everything
-           else fails (driver bug). */
-
-        iwrange range;
-        if (iw_get_range_info(skfd, interface, &range) < 0) {
-                close(skfd);
-                return 0;
-        }
-
-        iwstats stats;
-        if (iw_get_stats(skfd, interface, &stats, &range, 1) < 0) {
-                close(skfd);
-                return 0;
-        }
-
-        if (stats.qual.level != 0 || (stats.qual.updated & (IW_QUAL_DBM | IW_QUAL_RCPI))) {
-                if (!(stats.qual.updated & IW_QUAL_QUAL_INVALID)) {
-                        info->quality = stats.qual.qual;
-                        info->quality_max = range.max_qual.qual;
-                        info->quality_average = range.avg_qual.qual;
-                        info->flags |= WIRELESS_INFO_FLAG_HAS_QUALITY;
-                }
-
-                if (stats.qual.updated & IW_QUAL_RCPI) {
-                        if (!(stats.qual.updated & IW_QUAL_LEVEL_INVALID)) {
-                                info->signal_level = stats.qual.level / 2.0 - 110 + 0.5;
-                                info->flags |= WIRELESS_INFO_FLAG_HAS_SIGNAL;
-                        }
-                        if (!(stats.qual.updated & IW_QUAL_NOISE_INVALID)) {
-                                info->noise_level = stats.qual.noise / 2.0 - 110 + 0.5;
-                                info->flags |= WIRELESS_INFO_FLAG_HAS_NOISE;
-                        }
-                }
-                else {
-                        if ((stats.qual.updated & IW_QUAL_DBM) || stats.qual.level > range.max_qual.level) {
-                                if (!(stats.qual.updated & IW_QUAL_LEVEL_INVALID)) {
-                                        info->signal_level = stats.qual.level;
-                                        if (info->signal_level > 63)
-                                                info->signal_level -= 256;
-                                        info->flags |= WIRELESS_INFO_FLAG_HAS_SIGNAL;
-                                }
-                                if (!(stats.qual.updated & IW_QUAL_NOISE_INVALID)) {
-                                        info->noise_level = stats.qual.noise;
-                                        if (info->noise_level > 63)
-                                                info->noise_level -= 256;
-                                        info->flags |= WIRELESS_INFO_FLAG_HAS_NOISE;
-                                }
-                        }
-                        else {
-                                if (!(stats.qual.updated & IW_QUAL_LEVEL_INVALID)) {
-                                        info->signal_level = stats.qual.level;
-                                        info->signal_level_max = range.max_qual.level;
-                                        info->flags |= WIRELESS_INFO_FLAG_HAS_SIGNAL;
-                                }
-                                if (!(stats.qual.updated & IW_QUAL_NOISE_INVALID)) {
-                                        info->noise_level = stats.qual.noise;
-                                        info->noise_level_max = range.max_qual.noise;
-                                        info->flags |= WIRELESS_INFO_FLAG_HAS_NOISE;
-                                }
-                        }
-                }
-        }
-        else {
-                if (!(stats.qual.updated & IW_QUAL_QUAL_INVALID)) {
-                        info->quality = stats.qual.qual;
-                        info->flags |= WIRELESS_INFO_FLAG_HAS_QUALITY;
-                }
-                if (!(stats.qual.updated & IW_QUAL_LEVEL_INVALID)) {
-                        info->quality = stats.qual.level;
-                        info->flags |= WIRELESS_INFO_FLAG_HAS_SIGNAL;
-                }
-                if (!(stats.qual.updated & IW_QUAL_NOISE_INVALID)) {
-                        info->quality = stats.qual.noise;
-                        info->flags |= WIRELESS_INFO_FLAG_HAS_NOISE;
-                }
-        }
-
-        struct iwreq wrq;
-        if (iw_get_ext(skfd, interface, SIOCGIWRATE, &wrq) >= 0)
-                info->bitrate = wrq.u.bitrate.value;
-
-        close(skfd);
-        return 1;
+        return get_wireless_info_nl80211(interface, info);
 #endif
 #if defined(__FreeBSD__) || defined(__DragonFly__)
         int s, len, inwid;
@@ -404,7 +384,7 @@ void print_wireless_info(yajl_gen json_gen, char *buffer, const char *interface,
 
                 if (BEGINS_WITH(walk+1, "frequency")) {
                         if (info.flags & WIRELESS_INFO_FLAG_HAS_FREQUENCY)
-                                outwalk += sprintf(outwalk, "%1.1f GHz", info.frequency / 1e9);
+                                outwalk += sprintf(outwalk, "%1.1f GHz", info.frequency_mhz * 1e-3);
                         else
                                 *(outwalk++) = '?';
                         walk += strlen("frequency");
@@ -414,17 +394,6 @@ void print_wireless_info(yajl_gen json_gen, char *buffer, const char *interface,
 			outwalk += sprintf(outwalk, "%s", ip_address);
 			walk += strlen("ip");
                 }
-
-#ifdef LINUX
-                if (BEGINS_WITH(walk+1, "bitrate")) {
-                        char br_buffer[128];
-
-                        iw_print_bitrate(br_buffer, sizeof(br_buffer), info.bitrate);
-
-                        outwalk += sprintf(outwalk, "%s", br_buffer);
-                        walk += strlen("bitrate");
-                }
-#endif
         }
 
 out:
-- 
2.1.3

