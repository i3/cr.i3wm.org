From f1d0fced6feaf56b35794983666b161eefa280d3 Mon Sep 17 00:00:00 2001
From: koebi <koebischnell@â€¦>
Date: Sat, 7 Sep 2013 19:41:16 +0200
Subject: [PATCH] Run authentification in different process

This fixes #733
---
 i3lock.c | 62 ++++++++++++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 48 insertions(+), 14 deletions(-)

diff --git a/i3lock.c b/i3lock.c
index 74e15f2..5d0dad3 100644
--- a/i3lock.c
+++ b/i3lock.c
@@ -22,6 +22,7 @@
 #include <string.h>
 #include <ev.h>
 #include <sys/mman.h>
+#include <sys/wait.h>
 #include <X11/XKBlib.h>
 #include <X11/extensions/XKBfile.h>
 #include <xkbcommon/xkbcommon.h>
@@ -198,25 +199,23 @@ static void clear_input(void) {
     redraw_screen();
     unlock_state = STATE_KEY_PRESSED;
 }
-
-static void input_done(void) {
-    if (clear_pam_wrong_timeout) {
-        ev_timer_stop(main_loop, clear_pam_wrong_timeout);
-        free(clear_pam_wrong_timeout);
-        clear_pam_wrong_timeout = NULL;
-    }
-
-    pam_state = STATE_PAM_VERIFY;
-    redraw_screen();
-
-    if (pam_authenticate(pam_handle, 0) == PAM_SUCCESS) {
-        DEBUG("successfully authenticated\n");
+static void my_pipe(EV_P_ ev_io *pipe_watcher, int revents){
+    int ret;
+    if (read(pipe_watcher->fd, &ret, sizeof(ret)) < 0)
+        err(1, "Could not read pipe");
+    if (ret == PAM_SUCCESS){
+        DEBUG("Authentication successfull\n");
         clear_password_memory();
         exit(0);
     }
-
     if (debug_mode)
         fprintf(stderr, "Authentication failure\n");
+    
+    ev_io_stop(main_loop, pipe_watcher);
+    close(pipe_watcher->fd);
+    free(pipe_watcher);
+    
+    waitpid((long)pipe_watcher->data, NULL, 0);
 
     pam_state = STATE_PAM_WRONG;
     clear_input();
@@ -241,6 +240,41 @@ static void input_done(void) {
     }
 }
 
+static void input_done(void) {
+    if (clear_pam_wrong_timeout) {
+        ev_timer_stop(main_loop, clear_pam_wrong_timeout);
+        free(clear_pam_wrong_timeout);
+        clear_pam_wrong_timeout = NULL;
+    }
+
+    pam_state = STATE_PAM_VERIFY;
+    redraw_screen();
+    
+    /* fork to unblock pam_authenticate
+     */
+    int pipefd[2];
+    if (pipe(pipefd) != 0)
+        err(1, "Could not create pipe");
+    pid_t cpid;
+    cpid = fork();
+    if (cpid == 0) {    
+        int ret = pam_authenticate(pam_handle, 0);
+        //we don't check return values, because we exit anyways
+        write(pipefd[1], &ret, sizeof(ret)); 
+        clear_password_memory();
+        exit(0);
+    } else if (cpid < 0) {
+        err(1, "Could not fork");
+    }
+    close(pipefd[1]);
+    
+    struct ev_io *pipe_watcher = calloc(sizeof(struct ev_io), 1);
+
+    ev_io_init(pipe_watcher, my_pipe, pipefd[0], EV_READ);
+    ev_io_start(main_loop, pipe_watcher);
+    pipe_watcher->data = (void *)(long)cpid;
+}
+
 /*
  * Called when the user releases a key. We need to leave the Mode_switch
  * state when the user releases the Mode_switch key.
-- 
1.8.4.rc3

