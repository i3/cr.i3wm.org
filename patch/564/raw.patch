From 3aeb14e4abd99d3689e72374608f67e54406bd6e Mon Sep 17 00:00:00 2001
From: Tony Crisci <tony@…>
Date: Sun, 1 Jun 2014 13:05:27 -0400
Subject: [PATCH] Feature: mouse bindings over container decorations

A configured mouse binding (for example `bindsym button3 kill`) runs
its command when the mouse button is pressed over container
decorations. This behavior overrides the default button press action.
The clicked container will be selected by criteria.
---
 include/bindings.h |  9 +++++----
 src/bindings.c     | 21 ++++++++++++++-------
 src/click.c        | 17 ++++++++++++++++-
 src/key_press.c    |  2 +-
 4 files changed, 36 insertions(+), 13 deletions(-)

diff --git a/include/bindings.h b/include/bindings.h
index e51f5e9..04584ee 100644
--- a/include/bindings.h
+++ b/include/bindings.h
@@ -61,9 +61,10 @@ void switch_mode(const char *new_mode);
 void check_for_duplicate_bindings(struct context *context);
 
 /**
- * Runs the given binding and handles parse errors. Returns a CommandResult for
- * running the binding's command. Caller should render tree if
- * needs_tree_render is true. Free with command_result_free().
+ * Runs the given binding and handles parse errors. If con is passed, it will
+ * execute the command binding with that container selected by criteria.
+ * Returns a CommandResult for running the binding's command. Caller should
+ * render tree if needs_tree_render is true. Free with command_result_free().
  *
  */
-CommandResult *run_binding(Binding *bind);
+CommandResult *run_binding(Binding *bind, Con *con);
diff --git a/src/bindings.c b/src/bindings.c
index 4b5f225..737a85a 100644
--- a/src/bindings.c
+++ b/src/bindings.c
@@ -383,18 +383,25 @@ void check_for_duplicate_bindings(struct context *context) {
 }
 
 /*
- * Runs the given binding and handles parse errors. Returns a CommandResult for
- * running the binding's command. Caller should render tree if
- * needs_tree_render is true. Free with command_result_free().
+ * Runs the given binding and handles parse errors. If con is passed, it will
+ * execute the command binding with that container selected by criteria.
+ * Returns a CommandResult for running the binding's command. Caller should
+ * render tree if needs_tree_render is true. Free with command_result_free().
  *
  */
-CommandResult *run_binding(Binding *bind) {
+CommandResult *run_binding(Binding *bind, Con *con) {
+    char *command;
+
     /* We need to copy the command since “reload” may be part of the command,
      * and then the memory that bind->command points to may not contain the
      * same data anymore. */
-    char *command_copy = sstrdup(bind->command);
-    CommandResult *result = parse_command(command_copy, NULL);
-    free(command_copy);
+    if (con == NULL)
+        command = sstrdup(bind->command);
+    else
+        sasprintf(&command, "[con_id=\"%d\"] %s", con, bind->command);
+
+    CommandResult *result = parse_command(command, NULL);
+    free(command);
 
     if (result->needs_tree_render)
         tree_render();
diff --git a/src/click.c b/src/click.c
index 9b85b71..8df1f12 100644
--- a/src/click.c
+++ b/src/click.c
@@ -173,11 +173,26 @@ static int route_click(Con *con, xcb_button_press_event_t *event, const bool mod
 
     /* if focus changes, we must rerender */
     Con *initially_focused = focused;
+    bool needs_tree_render = false;
 
     /* don’t handle dockarea cons, they must not be focused */
     if (con->parent->type == CT_DOCKAREA)
         goto done;
 
+    /* if the user has bound an action to this click, it should override the
+     * default behavior. */
+    if (dest == CLICK_DECORATION) {
+        /* TODO: bindings for clicking other parts of the con, like the window
+         * area. */
+        Binding *bind = get_binding_from_xcb_event((xcb_generic_event_t *)event);
+        if (bind) {
+            CommandResult *result = run_binding(bind, con);
+            needs_tree_render = (needs_tree_render || result->needs_tree_render);
+            command_result_free(result);
+            goto done;
+        }
+    }
+
     /* Any click in a workspace should focus that workspace. If the
      * workspace is on another output we need to do a workspace_show in
      * order for i3bar (and others) to notice the change in workspace. */
@@ -301,7 +316,7 @@ done:
     xcb_allow_events(conn, XCB_ALLOW_REPLAY_POINTER, event->time);
     xcb_flush(conn);
 
-    if (initially_focused != focused)
+    if (needs_tree_render || initially_focused != focused)
         tree_render();
 
     return 0;
diff --git a/src/key_press.c b/src/key_press.c
index 56021da..95e5079 100644
--- a/src/key_press.c
+++ b/src/key_press.c
@@ -30,7 +30,7 @@ void handle_key_press(xcb_key_press_event_t *event) {
     if (bind == NULL)
         return;
 
-    CommandResult *result = run_binding(bind);
+    CommandResult *result = run_binding(bind, NULL);
 
     if (result->needs_tree_render)
         tree_render();
-- 
1.9.3

