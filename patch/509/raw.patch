From 652c549c6f3744efdfcd1b26bfb2888abef64303 Mon Sep 17 00:00:00 2001
From: Tony Crisci <tony@â€¦>
Date: Wed, 23 Apr 2014 21:54:23 -0400
Subject: [PATCH] i3bar: implement custom workspace numbers config

Implement the configuration option within the bar config directive to
disable workspace numbers with the directive `workspace_numbers no`.

This directive strips the workspace name of the number prefix and
delimiter. For example:

* "2:5" -> "5"
* "4:$" -> "$"
* "8" -> " "

This allows customization of i3bar for alternate ordering of workspaces
which has a legitimate use for alternate keyboard layouts such as
Dvorak.

fixes #1131
---
 i3bar/include/config.h     |  1 +
 i3bar/include/workspaces.h |  3 ++-
 i3bar/src/config.c         |  6 ++++++
 i3bar/src/workspaces.c     | 40 +++++++++++++++++++++++++++++++++-------
 i3bar/src/xcb.c            |  2 +-
 include/config.h           |  5 +++++
 parser-specs/config.spec   |  5 +++++
 src/config_directives.c    |  4 ++++
 src/ipc.c                  |  3 +++
 9 files changed, 60 insertions(+), 9 deletions(-)

diff --git a/i3bar/include/config.h b/i3bar/include/config.h
index e0b0efe..9d53c28 100644
--- a/i3bar/include/config.h
+++ b/i3bar/include/config.h
@@ -27,6 +27,7 @@ typedef struct config_t {
     struct xcb_color_strings_t colors;
     bool         disable_binding_mode_indicator;
     bool         disable_ws;
+    bool         disable_ws_numbers;
     char         *bar_id;
     char         *command;
     char         *fontname;
diff --git a/i3bar/include/workspaces.h b/i3bar/include/workspaces.h
index 9e9ecbb..d3d23c8 100644
--- a/i3bar/include/workspaces.h
+++ b/i3bar/include/workspaces.h
@@ -31,7 +31,8 @@ void free_workspaces(void);
 
 struct i3_ws {
     int                num;         /* The internal number of the ws */
-    i3String           *name;       /* The name of the ws */
+    char          *canonical_name;  /* The true name of the ws according to the ipc */
+    i3String           *name;       /* The name of the ws that is displayed on the bar */
     int                name_width;  /* The rendered width of the name */
     bool               visible;     /* If the ws is currently visible on an output */
     bool               focused;     /* If the ws is currently focused */
diff --git a/i3bar/src/config.c b/i3bar/src/config.c
index 0e6ba3f..dcc02a3 100644
--- a/i3bar/src/config.c
+++ b/i3bar/src/config.c
@@ -201,6 +201,12 @@ static int config_boolean_cb(void *params_, int val) {
         return 1;
     }
 
+    if (!strcmp(cur_key, "workspace_numbers")) {
+        DLOG("workspace_numbers = %d\n", val);
+        config.disable_ws_numbers = !val;
+        return 1;
+    }
+
     if (!strcmp(cur_key, "verbose")) {
         DLOG("verbose = %d\n", val);
         config.verbose = val;
diff --git a/i3bar/src/workspaces.c b/i3bar/src/workspaces.c
index e07a430..8cb4699 100644
--- a/i3bar/src/workspaces.c
+++ b/i3bar/src/workspaces.c
@@ -103,24 +103,49 @@ static int workspaces_integer_cb(void *params_, long val) {
  * Parse a string (name, output)
  *
  */
-#if YAJL_MAJOR >= 2
 static int workspaces_string_cb(void *params_, const unsigned char *val, size_t len) {
-#else
-static int workspaces_string_cb(void *params_, const unsigned char *val, unsigned int len) {
-#endif
         struct workspaces_json_params *params = (struct workspaces_json_params*) params_;
 
         char *output_name;
 
         if (!strcmp(params->cur_key, "name")) {
-            /* Save the name */
-            params->workspaces_walk->name = i3string_from_utf8_with_length((const char *)val, len);
+            const char *ws_name = (const char*)val;
+            params->workspaces_walk->canonical_name = strndup(ws_name, len);
+
+            if (config.disable_ws_numbers) {
+                /* Special case: strip off the workspace number */
+                char *ws_num = malloc(sizeof(char) * 10);
+                sprintf(ws_num, "%d", atoi(ws_name));
+
+                /* Calculate the length of the number str in the name */
+                int offset = strspn(ws_name, ws_num);
+
+                /* Also strip off one of the conventional ws name delimiters */
+                if (offset
+                        && (ws_name[offset] == ':'
+                            || ws_name[offset] == ' '
+                            || ws_name[offset] == '|')) {
+                        offset += 1;
+                    }
+
+                /* Offset may be equal to length, in which case just display a
+                 * space */
+                params->workspaces_walk->name = (offset < len
+                        ? i3string_from_utf8_with_length(ws_name + offset, len - offset)
+                        : i3string_from_utf8(" "));
+
+                FREE(ws_num);
+            } else {
+                /* Default case: just save the name */
+                params->workspaces_walk->name = i3string_from_utf8_with_length(ws_name, len);
+            }
 
             /* Save its rendered width */
             params->workspaces_walk->name_width =
                 predict_text_width(params->workspaces_walk->name);
 
-            DLOG("Got Workspace %s, name_width: %d, glyphs: %zu\n",
+            DLOG("Got Workspace canonical: %s, name: '%s', name_width: %d, glyphs: %zu\n",
+                 params->workspaces_walk->canonical_name,
                  i3string_as_utf8(params->workspaces_walk->name),
                  params->workspaces_walk->name_width,
                  i3string_get_num_glyphs(params->workspaces_walk->name));
@@ -267,6 +292,7 @@ void free_workspaces(void) {
         if (outputs_walk->workspaces != NULL && !TAILQ_EMPTY(outputs_walk->workspaces)) {
             TAILQ_FOREACH(ws_walk, outputs_walk->workspaces, tailq) {
                 I3STRING_FREE(ws_walk->name);
+                FREE(ws_walk->canonical_name);
             }
             FREE_TAILQ(outputs_walk->workspaces, i3_ws);
         }
diff --git a/i3bar/src/xcb.c b/i3bar/src/xcb.c
index 5204d71..8bfa8bf 100644
--- a/i3bar/src/xcb.c
+++ b/i3bar/src/xcb.c
@@ -406,7 +406,7 @@ void handle_button(xcb_button_press_event_t *event) {
      * buffer, then we copy character by character. */
     int num_quotes = 0;
     size_t namelen = 0;
-    const char *utf8_name = i3string_as_utf8(cur_ws->name);
+    const char *utf8_name = cur_ws->canonical_name;
     for (const char *walk = utf8_name; *walk != '\0'; walk++) {
         if (*walk == '"')
             num_quotes++;
diff --git a/include/config.h b/include/config.h
index 0bd68b9..63bf4f5 100644
--- a/include/config.h
+++ b/include/config.h
@@ -267,6 +267,11 @@ struct Barconfig {
      * zero. */
     bool hide_workspace_buttons;
 
+    /** Hide workspace numbers? Configuration option is 'workspace_numbers no'
+     * but we invert the bool. This is for supporting custom keyboard layouts.
+     * */
+    bool hide_workspace_numbers;
+
     /** Hide mode button? Configuration option is 'binding_mode_indicator no'
      * but we invert the bool for the same reason as hide_workspace_buttons.*/
     bool hide_binding_mode_indicator;
diff --git a/parser-specs/config.spec b/parser-specs/config.spec
index dfd6401..bb50cb8 100644
--- a/parser-specs/config.spec
+++ b/parser-specs/config.spec
@@ -358,6 +358,7 @@ state BAR:
   'font'                   -> BAR_FONT
   'binding_mode_indicator' -> BAR_BINDING_MODE_INDICATOR
   'workspace_buttons'      -> BAR_WORKSPACE_BUTTONS
+  'workspace_numbers'      -> BAR_WORKSPACE_NUMBERS
   'verbose'                -> BAR_VERBOSE
   'colors'                 -> BAR_COLORS_BRACE
   '}'
@@ -420,6 +421,10 @@ state BAR_WORKSPACE_BUTTONS:
   value = word
       -> call cfg_bar_workspace_buttons($value); BAR
 
+state BAR_WORKSPACE_NUMBERS:
+  value = word
+      -> call cfg_bar_workspace_numbers($value); BAR
+
 state BAR_VERBOSE:
   value = word
       -> call cfg_bar_verbose($value); BAR
diff --git a/src/config_directives.c b/src/config_directives.c
index f5a592f..408bc74 100644
--- a/src/config_directives.c
+++ b/src/config_directives.c
@@ -517,6 +517,10 @@ CFGFUN(bar_workspace_buttons, const char *value) {
     current_bar.hide_workspace_buttons = !eval_boolstr(value);
 }
 
+CFGFUN(bar_workspace_numbers, const char *value) {
+    current_bar.hide_workspace_numbers = !eval_boolstr(value);
+}
+
 CFGFUN(bar_finish) {
     DLOG("\t new bar configuration finished, saving.\n");
     /* Generate a unique ID for this bar if not already configured */
diff --git a/src/ipc.c b/src/ipc.c
index 82ab142..e4a9a74 100644
--- a/src/ipc.c
+++ b/src/ipc.c
@@ -747,6 +747,9 @@ IPC_HANDLER(get_bar_config) {
         ystr("workspace_buttons");
         y(bool, !config->hide_workspace_buttons);
 
+        ystr("workspace_numbers");
+        y(bool, !config->hide_workspace_numbers);
+
         ystr("binding_mode_indicator");
         y(bool, !config->hide_binding_mode_indicator);
 
-- 
1.9.2

